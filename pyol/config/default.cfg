
# *** DO NOT EDIT THIS FILE ***

# To override options, create the file 'openloops.cfg'
# in your OpenLoops installation directory.
# Options specified in there will overwrite default options.
# All options must be part of the section '[OpenLoops]'.

[OpenLoops]

supported_compilers = gfortran ifort
fortran_compiler = gfortran
fortran_tool = auto
cc = gcc
cxx = g++
cpp = cpp

# compiler dependent flags
gfortran_noautomatic = -fno-automatic
gfortran_f77_flags = -ffixed-line-length-132
gfortran_f90_flags =
gfortran_f_flags =
ifort_noautomatic = -save
ifort_f77_flags = -132
ifort_f90_flags =
ifort_f_flags =
ccflags = -Wall

# generator: 0:off, 1:on, 2:download
generator = 2

# number of parallel generator jobs
gjobs = 1

# write generator output to a log file; implied if gjobs > 1
glog = 0

# release version; max. 8 characters, empty if none
release = 1.2.4
clean =

# precision: [sp (single),] dp (double), [ep (extended, only gfortran),] qp (quad),
#            or a whitespace separated list; dp must always be active
precision = dp qp

# shared_libraries: true for shared libraries, false for static libraries
shared_libraries = 1

# num_jobs: default number of jobs for parallel build
num_jobs = 0

# compile: 0:off, 1:on (generic libraries only when no process is specified), 2:on
compile = 1
# compile extra: compile 'extra' processes (usually extra means real corrections)
compile_extra = 0

# compile_libraries/link_libraries: whitespace separated list of rambo, collier, cuttools, samurai
# if needed, olcommon, oneloop, openloops are added automatically
compile_libraries = rambo collier cuttools
link_libraries = %(compile_libraries)s
# scalar integral libraries for cuttools and samurai; possible values: oneloop qcdloop
scalar_integral_libraries = oneloop
collier_legacy = 0

# 0: legacy interface only, 1: native interface, 2: native and blha interface
interface = 2

# debug: bitwise combination of 1 (debug flag), 2 (disable optimisation), 4 (array bound checks)
debug = 0
# added to f_flags if debug = 1,3,5,7
debug_flags_1 = -g
# added to f_flags if debug = 4,5,6,7
gfortran_debug_flags_4 = -Warray-bounds -fbounds-check
ifort_debug_flags_4 = -CB
debug_flags_4 = %%(%(fortran_tool)s_debug_flags_4)s
# Fortran 77 compiler options
f77_flags = %%(%(fortran_tool)s_f77_flags)s
# Fortran 90 compiler options
f90_flags = %%(%(fortran_tool)s_f90_flags)s
# loop_optimisation is only used for loop_*, virtual_<n>_*, tensorsum_*
generic_optimisation = -O2
born_optimisation = -O2
loop_optimisation = -O0
link_optimisation = -O2
# common compiler and linker options
common_flags =
link_flags = %(common_flags)s
# common Fortran compiler options, added to f77_flags and f90_flags
f_flags = %%(%(fortran_tool)s_f_flags)s %(common_flags)s
noautomatic = %%(%(fortran_tool)s_noautomatic)s

import_env = PATH LD_LIBRARY_PATH CPATH C_INCLUDE_PATH CPLUS_INCLUDE_PATH INTEL_LICENSE_FILE
math_cmd = math-8.0
math_flags = -noinit
lib_src_dir = lib_src
process_def_dir = process_def
process_src_dir = process_src
process_obj_dir = process_obj
generic_lib_dir = lib
process_lib_dir = proclib
generator_dir = generator/Generator
template_dir = generator/Templates
model_dir = generator/Models
template_files = born born_generic checks common common_generic loop pseudotree tensorsum virtual virtual_branch
generator_files = OpenLoops Init SetModel Colour BasicRecycling GenerateFortranCode ParticleNames
definition_processor_script = pyol/build/define_process.scons
definition_processor_prg = %(generator_dir)s/PreProcess.m
code_generator_script = pyol/build/generate_process.scons
code_generator_prg = %(generator_dir)s/RunGenerator.m
process_download_script = pyol/bin/download_process.py
remote_process_url = http://www.physik.uzh.ch/data/openloops/repositories
local_server_path =
process_repositories = public
process_api_version = 1
force_download = 0
process_update = 0
pyrunoptions =
